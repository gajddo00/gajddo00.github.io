/* tslint:disable */
/* eslint-disable */
/**
 * SSO.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AdminNotificationsDto
 */
export interface AdminNotificationsDto {
    /**
     * 
     * @type {number}
     * @memberof AdminNotificationsDto
     */
    'serviceRequestsCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof AdminNotificationsDto
     */
    'serviceManagerRequestsCount'?: number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const AuthMethod = {
    Password: 'Password',
    Email: 'Email',
    Mobile: 'Mobile'
} as const;

export type AuthMethod = typeof AuthMethod[keyof typeof AuthMethod];


/**
 * 
 * @export
 * @interface AuthorizeCommand
 */
export interface AuthorizeCommand {
    /**
     * 
     * @type {string}
     * @memberof AuthorizeCommand
     */
    'callbackURL'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AuthorizeCommand
     */
    'clientId'?: string;
}
/**
 * 
 * @export
 * @interface CreateServiceCommand
 */
export interface CreateServiceCommand {
    /**
     * 
     * @type {string}
     * @memberof CreateServiceCommand
     */
    'serviceName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateServiceCommand
     */
    'description'?: string | null;
    /**
     * 
     * @type {ServiceType}
     * @memberof CreateServiceCommand
     */
    'serviceType'?: ServiceType;
    /**
     * 
     * @type {string}
     * @memberof CreateServiceCommand
     */
    'url'?: string | null;
    /**
     * 
     * @type {AuthMethod}
     * @memberof CreateServiceCommand
     */
    'minimumAuthMethod'?: AuthMethod;
    /**
     * 
     * @type {string}
     * @memberof CreateServiceCommand
     */
    'authorizeURL'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateServiceCommand
     */
    'logoutHookURL'?: string | null;
}
/**
 * 
 * @export
 * @interface JwtDto
 */
export interface JwtDto {
    /**
     * 
     * @type {string}
     * @memberof JwtDto
     */
    'token'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof JwtDto
     */
    'expiresIn'?: number;
}
/**
 * 
 * @export
 * @interface LoginHistoryDto
 */
export interface LoginHistoryDto {
    /**
     * 
     * @type {string}
     * @memberof LoginHistoryDto
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LoginHistoryDto
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LoginHistoryDto
     */
    'location'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LoginHistoryDto
     */
    'timestamp'?: string;
    /**
     * 
     * @type {AuthMethod}
     * @memberof LoginHistoryDto
     */
    'method'?: AuthMethod;
    /**
     * 
     * @type {string}
     * @memberof LoginHistoryDto
     */
    'platform'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LoginHistoryDto
     */
    'userAgent'?: string | null;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const LoginHistoryFilter = {
    All: 'All',
    OnlyMe: 'OnlyMe'
} as const;

export type LoginHistoryFilter = typeof LoginHistoryFilter[keyof typeof LoginHistoryFilter];


/**
 * 
 * @export
 * @interface LoginRequestDto
 */
export interface LoginRequestDto {
    /**
     * 
     * @type {AuthMethod}
     * @memberof LoginRequestDto
     */
    'requiredAuthMethod'?: AuthMethod;
}
/**
 * 
 * @export
 * @interface LogoutCommand
 */
export interface LogoutCommand {
    /**
     * 
     * @type {string}
     * @memberof LogoutCommand
     */
    'logoutCallbackUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogoutCommand
     */
    'notificationsSubId'?: string;
}
/**
 * 
 * @export
 * @interface ManagerServiceDto
 */
export interface ManagerServiceDto {
    /**
     * 
     * @type {string}
     * @memberof ManagerServiceDto
     */
    'id'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ManagerServiceDto
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ManagerServiceDto
     */
    'description'?: string | null;
    /**
     * 
     * @type {AuthMethod}
     * @memberof ManagerServiceDto
     */
    'authMethod'?: AuthMethod;
    /**
     * 
     * @type {ServiceType}
     * @memberof ManagerServiceDto
     */
    'serviceType'?: ServiceType;
    /**
     * 
     * @type {ServiceState}
     * @memberof ManagerServiceDto
     */
    'serviceState'?: ServiceState;
    /**
     * 
     * @type {string}
     * @memberof ManagerServiceDto
     */
    'organization'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ManagerServiceDto
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ManagerServiceDto
     */
    'url'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ManagerServiceDto
     */
    'appId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ManagerServiceDto
     */
    'authorizeUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ManagerServiceDto
     */
    'logoutHookUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ManagerServiceDto
     */
    'publicKey'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ManagerServiceDto
     */
    'feNotificationsEnabled'?: boolean;
}
/**
 * 
 * @export
 * @interface ManagerServiceDtoAllOf
 */
export interface ManagerServiceDtoAllOf {
    /**
     * 
     * @type {string}
     * @memberof ManagerServiceDtoAllOf
     */
    'appId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ManagerServiceDtoAllOf
     */
    'authorizeUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ManagerServiceDtoAllOf
     */
    'logoutHookUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ManagerServiceDtoAllOf
     */
    'publicKey'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ManagerServiceDtoAllOf
     */
    'feNotificationsEnabled'?: boolean;
}
/**
 * 
 * @export
 * @interface ManagerServicesDto
 */
export interface ManagerServicesDto {
    /**
     * 
     * @type {PaginatedListOfManagerServiceDto}
     * @memberof ManagerServicesDto
     */
    'services'?: PaginatedListOfManagerServiceDto;
    /**
     * 
     * @type {Array<ManagerServiceDto>}
     * @memberof ManagerServicesDto
     */
    'pendingRequests'?: Array<ManagerServiceDto> | null;
}
/**
 * 
 * @export
 * @interface PaginatedListOfLoginHistoryDto
 */
export interface PaginatedListOfLoginHistoryDto {
    /**
     * 
     * @type {Array<LoginHistoryDto>}
     * @memberof PaginatedListOfLoginHistoryDto
     */
    'items'?: Array<LoginHistoryDto> | null;
    /**
     * 
     * @type {number}
     * @memberof PaginatedListOfLoginHistoryDto
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof PaginatedListOfLoginHistoryDto
     */
    'totalPages'?: number;
    /**
     * 
     * @type {number}
     * @memberof PaginatedListOfLoginHistoryDto
     */
    'totalCount'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PaginatedListOfLoginHistoryDto
     */
    'hasPreviousPage'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PaginatedListOfLoginHistoryDto
     */
    'hasNextPage'?: boolean;
}
/**
 * 
 * @export
 * @interface PaginatedListOfManagerServiceDto
 */
export interface PaginatedListOfManagerServiceDto {
    /**
     * 
     * @type {Array<ManagerServiceDto>}
     * @memberof PaginatedListOfManagerServiceDto
     */
    'items'?: Array<ManagerServiceDto> | null;
    /**
     * 
     * @type {number}
     * @memberof PaginatedListOfManagerServiceDto
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof PaginatedListOfManagerServiceDto
     */
    'totalPages'?: number;
    /**
     * 
     * @type {number}
     * @memberof PaginatedListOfManagerServiceDto
     */
    'totalCount'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PaginatedListOfManagerServiceDto
     */
    'hasPreviousPage'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PaginatedListOfManagerServiceDto
     */
    'hasNextPage'?: boolean;
}
/**
 * 
 * @export
 * @interface PaginatedListOfServiceDto
 */
export interface PaginatedListOfServiceDto {
    /**
     * 
     * @type {Array<ServiceDto>}
     * @memberof PaginatedListOfServiceDto
     */
    'items'?: Array<ServiceDto> | null;
    /**
     * 
     * @type {number}
     * @memberof PaginatedListOfServiceDto
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof PaginatedListOfServiceDto
     */
    'totalPages'?: number;
    /**
     * 
     * @type {number}
     * @memberof PaginatedListOfServiceDto
     */
    'totalCount'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PaginatedListOfServiceDto
     */
    'hasPreviousPage'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PaginatedListOfServiceDto
     */
    'hasNextPage'?: boolean;
}
/**
 * 
 * @export
 * @interface PaginatedListOfServiceManagerRequestDto
 */
export interface PaginatedListOfServiceManagerRequestDto {
    /**
     * 
     * @type {Array<ServiceManagerRequestDto>}
     * @memberof PaginatedListOfServiceManagerRequestDto
     */
    'items'?: Array<ServiceManagerRequestDto> | null;
    /**
     * 
     * @type {number}
     * @memberof PaginatedListOfServiceManagerRequestDto
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof PaginatedListOfServiceManagerRequestDto
     */
    'totalPages'?: number;
    /**
     * 
     * @type {number}
     * @memberof PaginatedListOfServiceManagerRequestDto
     */
    'totalCount'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PaginatedListOfServiceManagerRequestDto
     */
    'hasPreviousPage'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PaginatedListOfServiceManagerRequestDto
     */
    'hasNextPage'?: boolean;
}
/**
 * 
 * @export
 * @interface PaginatedListOfServiceRequestDto
 */
export interface PaginatedListOfServiceRequestDto {
    /**
     * 
     * @type {Array<ServiceRequestDto>}
     * @memberof PaginatedListOfServiceRequestDto
     */
    'items'?: Array<ServiceRequestDto> | null;
    /**
     * 
     * @type {number}
     * @memberof PaginatedListOfServiceRequestDto
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof PaginatedListOfServiceRequestDto
     */
    'totalPages'?: number;
    /**
     * 
     * @type {number}
     * @memberof PaginatedListOfServiceRequestDto
     */
    'totalCount'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PaginatedListOfServiceRequestDto
     */
    'hasPreviousPage'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PaginatedListOfServiceRequestDto
     */
    'hasNextPage'?: boolean;
}
/**
 * 
 * @export
 * @interface PaginatedListOfUserDto
 */
export interface PaginatedListOfUserDto {
    /**
     * 
     * @type {Array<UserDto>}
     * @memberof PaginatedListOfUserDto
     */
    'items'?: Array<UserDto> | null;
    /**
     * 
     * @type {number}
     * @memberof PaginatedListOfUserDto
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof PaginatedListOfUserDto
     */
    'totalPages'?: number;
    /**
     * 
     * @type {number}
     * @memberof PaginatedListOfUserDto
     */
    'totalCount'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PaginatedListOfUserDto
     */
    'hasPreviousPage'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PaginatedListOfUserDto
     */
    'hasNextPage'?: boolean;
}
/**
 * 
 * @export
 * @interface PasswordLoginCommand
 */
export interface PasswordLoginCommand {
    /**
     * 
     * @type {string}
     * @memberof PasswordLoginCommand
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PasswordLoginCommand
     */
    'password'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PasswordLoginCommand
     */
    'requestKey'?: string | null;
}
/**
 * 
 * @export
 * @interface ProfileDto
 */
export interface ProfileDto {
    /**
     * 
     * @type {string}
     * @memberof ProfileDto
     */
    'firstName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProfileDto
     */
    'lastName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProfileDto
     */
    'email'?: string | null;
    /**
     * 
     * @type {Role}
     * @memberof ProfileDto
     */
    'role'?: Role;
}
/**
 * 
 * @export
 * @interface RedirectDto
 */
export interface RedirectDto {
    /**
     * 
     * @type {string}
     * @memberof RedirectDto
     */
    'redirectUrl'?: string | null;
}
/**
 * 
 * @export
 * @interface RegisterServiceManagerCommand
 */
export interface RegisterServiceManagerCommand {
    /**
     * 
     * @type {string}
     * @memberof RegisterServiceManagerCommand
     */
    'firstname'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RegisterServiceManagerCommand
     */
    'lastname'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RegisterServiceManagerCommand
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RegisterServiceManagerCommand
     */
    'organization'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RegisterServiceManagerCommand
     */
    'password'?: string | null;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const Role = {
    System: 'System',
    User: 'User',
    ServiceManager: 'ServiceManager',
    Administrator: 'Administrator'
} as const;

export type Role = typeof Role[keyof typeof Role];


/**
 * 
 * @export
 * @interface ServiceDto
 */
export interface ServiceDto {
    /**
     * 
     * @type {string}
     * @memberof ServiceDto
     */
    'id'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ServiceDto
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ServiceDto
     */
    'description'?: string | null;
    /**
     * 
     * @type {AuthMethod}
     * @memberof ServiceDto
     */
    'authMethod'?: AuthMethod;
    /**
     * 
     * @type {ServiceType}
     * @memberof ServiceDto
     */
    'serviceType'?: ServiceType;
    /**
     * 
     * @type {ServiceState}
     * @memberof ServiceDto
     */
    'serviceState'?: ServiceState;
    /**
     * 
     * @type {string}
     * @memberof ServiceDto
     */
    'organization'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ServiceDto
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceDto
     */
    'url'?: string | null;
}
/**
 * 
 * @export
 * @interface ServiceManagerRequestDto
 */
export interface ServiceManagerRequestDto {
    /**
     * 
     * @type {string}
     * @memberof ServiceManagerRequestDto
     */
    'userId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ServiceManagerRequestDto
     */
    'firstname'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ServiceManagerRequestDto
     */
    'lastname'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ServiceManagerRequestDto
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ServiceManagerRequestDto
     */
    'organization'?: string | null;
}
/**
 * 
 * @export
 * @interface ServiceRequestDto
 */
export interface ServiceRequestDto {
    /**
     * 
     * @type {string}
     * @memberof ServiceRequestDto
     */
    'serviceId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceRequestDto
     */
    'userFullName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ServiceRequestDto
     */
    'userEmail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ServiceRequestDto
     */
    'serviceName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ServiceRequestDto
     */
    'url'?: string | null;
    /**
     * 
     * @type {AuthMethod}
     * @memberof ServiceRequestDto
     */
    'authMethod'?: AuthMethod;
    /**
     * 
     * @type {ServiceType}
     * @memberof ServiceRequestDto
     */
    'serviceType'?: ServiceType;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const ServiceState = {
    Registered: 'REGISTERED',
    Pending: 'PENDING'
} as const;

export type ServiceState = typeof ServiceState[keyof typeof ServiceState];


/**
 * 
 * @export
 * @enum {string}
 */

export const ServiceType = {
    Website: 'Website',
    Mobile: 'Mobile',
    Desktop: 'Desktop'
} as const;

export type ServiceType = typeof ServiceType[keyof typeof ServiceType];


/**
 * 
 * @export
 * @interface StatusDto
 */
export interface StatusDto {
    /**
     * 
     * @type {string}
     * @memberof StatusDto
     */
    'message'?: string | null;
}
/**
 * 
 * @export
 * @interface TokenCommand
 */
export interface TokenCommand {
    /**
     * 
     * @type {string}
     * @memberof TokenCommand
     */
    'clientId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TokenCommand
     */
    'authToken'?: string | null;
}
/**
 * 
 * @export
 * @interface UpdateServiceCommand
 */
export interface UpdateServiceCommand {
    /**
     * 
     * @type {string}
     * @memberof UpdateServiceCommand
     */
    'serviceId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateServiceCommand
     */
    'serviceName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateServiceCommand
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateServiceCommand
     */
    'url'?: string | null;
    /**
     * 
     * @type {AuthMethod}
     * @memberof UpdateServiceCommand
     */
    'minimumAuthMethod'?: AuthMethod;
    /**
     * 
     * @type {ServiceType}
     * @memberof UpdateServiceCommand
     */
    'serviceType'?: ServiceType;
    /**
     * 
     * @type {string}
     * @memberof UpdateServiceCommand
     */
    'authorizeURL'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateServiceCommand
     */
    'logoutHookURL'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateServiceCommand
     */
    'feNotificationsEnabled'?: boolean;
}
/**
 * 
 * @export
 * @interface UpdateSettingsCommand
 */
export interface UpdateSettingsCommand {
    /**
     * 
     * @type {string}
     * @memberof UpdateSettingsCommand
     */
    'oldPassword'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateSettingsCommand
     */
    'newPassword'?: string | null;
}
/**
 * 
 * @export
 * @interface UserDto
 */
export interface UserDto {
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'id'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'firstName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'lastName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'lastPasswordChange'?: string;
}
/**
 * 
 * @export
 * @interface VerifyLogoutCommand
 */
export interface VerifyLogoutCommand {
    /**
     * 
     * @type {string}
     * @memberof VerifyLogoutCommand
     */
    'logoutToken'?: string | null;
}

/**
 * AdminApi - axios parameter creator
 * @export
 */
export const AdminApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminApproveServiceManagerRequest: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('adminApproveServiceManagerRequest', 'userId', userId)
            const localVarPath = `/api/admin/service-manager-requests/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} serviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminApproveServiceRequest: async (serviceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceId' is not null or undefined
            assertParamExists('adminApproveServiceRequest', 'serviceId', serviceId)
            const localVarPath = `/api/admin/service-requests/{serviceId}`
                .replace(`{${"serviceId"}}`, encodeURIComponent(String(serviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetNotificationsCount: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/admin/notification-count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetServiceRequests: async (pageNumber?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/admin/service-requests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (pageNumber !== undefined) {
                localVarQueryParameter['PageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetServicesManagerRequests: async (pageNumber?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/admin/service-manager-requests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (pageNumber !== undefined) {
                localVarQueryParameter['PageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminRemoveServiceManagerRequest: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('adminRemoveServiceManagerRequest', 'userId', userId)
            const localVarPath = `/api/admin/service-manager-requests/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} serviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminRemoveServiceRequest: async (serviceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceId' is not null or undefined
            assertParamExists('adminRemoveServiceRequest', 'serviceId', serviceId)
            const localVarPath = `/api/admin/service-requests/{serviceId}`
                .replace(`{${"serviceId"}}`, encodeURIComponent(String(serviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminApi - functional programming interface
 * @export
 */
export const AdminApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminApproveServiceManagerRequest(userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatusDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminApproveServiceManagerRequest(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} serviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminApproveServiceRequest(serviceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatusDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminApproveServiceRequest(serviceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetNotificationsCount(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminNotificationsDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetNotificationsCount(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetServiceRequests(pageNumber?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedListOfServiceRequestDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetServiceRequests(pageNumber, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetServicesManagerRequests(pageNumber?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedListOfServiceManagerRequestDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetServicesManagerRequests(pageNumber, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminRemoveServiceManagerRequest(userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatusDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminRemoveServiceManagerRequest(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} serviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminRemoveServiceRequest(serviceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatusDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminRemoveServiceRequest(serviceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AdminApi - factory interface
 * @export
 */
export const AdminApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminApiFp(configuration)
    return {
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminApproveServiceManagerRequest(userId: string, options?: any): AxiosPromise<StatusDto> {
            return localVarFp.adminApproveServiceManagerRequest(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} serviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminApproveServiceRequest(serviceId: string, options?: any): AxiosPromise<StatusDto> {
            return localVarFp.adminApproveServiceRequest(serviceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetNotificationsCount(options?: any): AxiosPromise<AdminNotificationsDto> {
            return localVarFp.adminGetNotificationsCount(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetServiceRequests(pageNumber?: number, pageSize?: number, options?: any): AxiosPromise<PaginatedListOfServiceRequestDto> {
            return localVarFp.adminGetServiceRequests(pageNumber, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetServicesManagerRequests(pageNumber?: number, pageSize?: number, options?: any): AxiosPromise<PaginatedListOfServiceManagerRequestDto> {
            return localVarFp.adminGetServicesManagerRequests(pageNumber, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminRemoveServiceManagerRequest(userId: string, options?: any): AxiosPromise<StatusDto> {
            return localVarFp.adminRemoveServiceManagerRequest(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} serviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminRemoveServiceRequest(serviceId: string, options?: any): AxiosPromise<StatusDto> {
            return localVarFp.adminRemoveServiceRequest(serviceId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdminApi - object-oriented interface
 * @export
 * @class AdminApi
 * @extends {BaseAPI}
 */
export class AdminApi extends BaseAPI {
    /**
     * 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public adminApproveServiceManagerRequest(userId: string, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminApproveServiceManagerRequest(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} serviceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public adminApproveServiceRequest(serviceId: string, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminApproveServiceRequest(serviceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public adminGetNotificationsCount(options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminGetNotificationsCount(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public adminGetServiceRequests(pageNumber?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminGetServiceRequests(pageNumber, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public adminGetServicesManagerRequests(pageNumber?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminGetServicesManagerRequests(pageNumber, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public adminRemoveServiceManagerRequest(userId: string, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminRemoveServiceManagerRequest(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} serviceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public adminRemoveServiceRequest(serviceId: string, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminRemoveServiceRequest(serviceId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AuthorizeCommand} [authorizeCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authAuthorize: async (authorizeCommand?: AuthorizeCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/authorize`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authorizeCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authCheck: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [requestKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authGetLoginRequestDescription: async (requestKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/login-request-desc`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (requestKey !== undefined) {
                localVarQueryParameter['RequestKey'] = requestKey;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LogoutCommand} [logoutCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLogout: async (logoutCommand?: LogoutCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(logoutCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PasswordLoginCommand} [passwordLoginCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authPwdLogin: async (passwordLoginCommand?: PasswordLoginCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/pwd-login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(passwordLoginCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRefreshToken: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/refresh-token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegisterServiceManagerCommand} [registerServiceManagerCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRegisterManager: async (registerServiceManagerCommand?: RegisterServiceManagerCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerServiceManagerCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TokenCommand} [tokenCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authToken: async (tokenCommand?: TokenCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tokenCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {VerifyLogoutCommand} [verifyLogoutCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authVerifyLogout: async (verifyLogoutCommand?: VerifyLogoutCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/verify-logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(verifyLogoutCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {AuthorizeCommand} [authorizeCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authAuthorize(authorizeCommand?: AuthorizeCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RedirectDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authAuthorize(authorizeCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authCheck(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authCheck(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [requestKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authGetLoginRequestDescription(requestKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginRequestDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authGetLoginRequestDescription(requestKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {LogoutCommand} [logoutCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authLogout(logoutCommand?: LogoutCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RedirectDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authLogout(logoutCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PasswordLoginCommand} [passwordLoginCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authPwdLogin(passwordLoginCommand?: PasswordLoginCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RedirectDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authPwdLogin(passwordLoginCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authRefreshToken(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JwtDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authRefreshToken(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RegisterServiceManagerCommand} [registerServiceManagerCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authRegisterManager(registerServiceManagerCommand?: RegisterServiceManagerCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatusDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authRegisterManager(registerServiceManagerCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {TokenCommand} [tokenCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authToken(tokenCommand?: TokenCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JwtDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authToken(tokenCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {VerifyLogoutCommand} [verifyLogoutCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authVerifyLogout(verifyLogoutCommand?: VerifyLogoutCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authVerifyLogout(verifyLogoutCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @param {AuthorizeCommand} [authorizeCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authAuthorize(authorizeCommand?: AuthorizeCommand, options?: any): AxiosPromise<RedirectDto> {
            return localVarFp.authAuthorize(authorizeCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authCheck(options?: any): AxiosPromise<void> {
            return localVarFp.authCheck(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [requestKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authGetLoginRequestDescription(requestKey?: string, options?: any): AxiosPromise<LoginRequestDto> {
            return localVarFp.authGetLoginRequestDescription(requestKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LogoutCommand} [logoutCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLogout(logoutCommand?: LogoutCommand, options?: any): AxiosPromise<RedirectDto> {
            return localVarFp.authLogout(logoutCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PasswordLoginCommand} [passwordLoginCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authPwdLogin(passwordLoginCommand?: PasswordLoginCommand, options?: any): AxiosPromise<RedirectDto> {
            return localVarFp.authPwdLogin(passwordLoginCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRefreshToken(options?: any): AxiosPromise<JwtDto> {
            return localVarFp.authRefreshToken(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RegisterServiceManagerCommand} [registerServiceManagerCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRegisterManager(registerServiceManagerCommand?: RegisterServiceManagerCommand, options?: any): AxiosPromise<StatusDto> {
            return localVarFp.authRegisterManager(registerServiceManagerCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TokenCommand} [tokenCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authToken(tokenCommand?: TokenCommand, options?: any): AxiosPromise<JwtDto> {
            return localVarFp.authToken(tokenCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {VerifyLogoutCommand} [verifyLogoutCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authVerifyLogout(verifyLogoutCommand?: VerifyLogoutCommand, options?: any): AxiosPromise<void> {
            return localVarFp.authVerifyLogout(verifyLogoutCommand, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {AuthorizeCommand} [authorizeCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authAuthorize(authorizeCommand?: AuthorizeCommand, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authAuthorize(authorizeCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authCheck(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authCheck(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [requestKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authGetLoginRequestDescription(requestKey?: string, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authGetLoginRequestDescription(requestKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LogoutCommand} [logoutCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authLogout(logoutCommand?: LogoutCommand, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authLogout(logoutCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PasswordLoginCommand} [passwordLoginCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authPwdLogin(passwordLoginCommand?: PasswordLoginCommand, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authPwdLogin(passwordLoginCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authRefreshToken(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authRefreshToken(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RegisterServiceManagerCommand} [registerServiceManagerCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authRegisterManager(registerServiceManagerCommand?: RegisterServiceManagerCommand, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authRegisterManager(registerServiceManagerCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TokenCommand} [tokenCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authToken(tokenCommand?: TokenCommand, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authToken(tokenCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {VerifyLogoutCommand} [verifyLogoutCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authVerifyLogout(verifyLogoutCommand?: VerifyLogoutCommand, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authVerifyLogout(verifyLogoutCommand, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * NotificationsApi - axios parameter creator
 * @export
 */
export const NotificationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} subId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsGetServerSentEvent: async (subId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subId' is not null or undefined
            assertParamExists('notificationsGetServerSentEvent', 'subId', subId)
            const localVarPath = `/api/notifications/{subId}`
                .replace(`{${"subId"}}`, encodeURIComponent(String(subId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationsApi - functional programming interface
 * @export
 */
export const NotificationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NotificationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} subId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationsGetServerSentEvent(subId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificationsGetServerSentEvent(subId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NotificationsApi - factory interface
 * @export
 */
export const NotificationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NotificationsApiFp(configuration)
    return {
        /**
         * 
         * @param {string} subId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsGetServerSentEvent(subId: string, options?: any): AxiosPromise<object> {
            return localVarFp.notificationsGetServerSentEvent(subId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NotificationsApi - object-oriented interface
 * @export
 * @class NotificationsApi
 * @extends {BaseAPI}
 */
export class NotificationsApi extends BaseAPI {
    /**
     * 
     * @param {string} subId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    public notificationsGetServerSentEvent(subId: string, options?: AxiosRequestConfig) {
        return NotificationsApiFp(this.configuration).notificationsGetServerSentEvent(subId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ServicesApi - axios parameter creator
 * @export
 */
export const ServicesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [serviceId] 
         * @param {LoginHistoryFilter} [filter] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesGetLoginHistory: async (serviceId?: string, filter?: LoginHistoryFilter, pageNumber?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user/services/login-history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (serviceId !== undefined) {
                localVarQueryParameter['ServiceId'] = serviceId;
            }

            if (filter !== undefined) {
                localVarQueryParameter['Filter'] = filter;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['PageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} serviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesGetServiceDetail: async (serviceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceId' is not null or undefined
            assertParamExists('servicesGetServiceDetail', 'serviceId', serviceId)
            const localVarPath = `/api/user/services/{serviceId}`
                .replace(`{${"serviceId"}}`, encodeURIComponent(String(serviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [searchQuery] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesGetServices: async (searchQuery?: string, pageNumber?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user/services`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (searchQuery !== undefined) {
                localVarQueryParameter['SearchQuery'] = searchQuery;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['PageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ServicesApi - functional programming interface
 * @export
 */
export const ServicesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ServicesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [serviceId] 
         * @param {LoginHistoryFilter} [filter] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesGetLoginHistory(serviceId?: string, filter?: LoginHistoryFilter, pageNumber?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedListOfLoginHistoryDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesGetLoginHistory(serviceId, filter, pageNumber, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} serviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesGetServiceDetail(serviceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesGetServiceDetail(serviceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [searchQuery] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesGetServices(searchQuery?: string, pageNumber?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedListOfServiceDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesGetServices(searchQuery, pageNumber, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ServicesApi - factory interface
 * @export
 */
export const ServicesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ServicesApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [serviceId] 
         * @param {LoginHistoryFilter} [filter] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesGetLoginHistory(serviceId?: string, filter?: LoginHistoryFilter, pageNumber?: number, pageSize?: number, options?: any): AxiosPromise<PaginatedListOfLoginHistoryDto> {
            return localVarFp.servicesGetLoginHistory(serviceId, filter, pageNumber, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} serviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesGetServiceDetail(serviceId: string, options?: any): AxiosPromise<ServiceDto> {
            return localVarFp.servicesGetServiceDetail(serviceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [searchQuery] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesGetServices(searchQuery?: string, pageNumber?: number, pageSize?: number, options?: any): AxiosPromise<PaginatedListOfServiceDto> {
            return localVarFp.servicesGetServices(searchQuery, pageNumber, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ServicesApi - object-oriented interface
 * @export
 * @class ServicesApi
 * @extends {BaseAPI}
 */
export class ServicesApi extends BaseAPI {
    /**
     * 
     * @param {string} [serviceId] 
     * @param {LoginHistoryFilter} [filter] 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApi
     */
    public servicesGetLoginHistory(serviceId?: string, filter?: LoginHistoryFilter, pageNumber?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return ServicesApiFp(this.configuration).servicesGetLoginHistory(serviceId, filter, pageNumber, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} serviceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApi
     */
    public servicesGetServiceDetail(serviceId: string, options?: AxiosRequestConfig) {
        return ServicesApiFp(this.configuration).servicesGetServiceDetail(serviceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [searchQuery] 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApi
     */
    public servicesGetServices(searchQuery?: string, pageNumber?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return ServicesApiFp(this.configuration).servicesGetServices(searchQuery, pageNumber, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ServicesManagerApi - axios parameter creator
 * @export
 */
export const ServicesManagerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateServiceCommand} [createServiceCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesManagerCreateService: async (createServiceCommand?: CreateServiceCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/manager/services`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createServiceCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} serviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesManagerDeleteService: async (serviceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceId' is not null or undefined
            assertParamExists('servicesManagerDeleteService', 'serviceId', serviceId)
            const localVarPath = `/api/manager/services/{serviceId}`
                .replace(`{${"serviceId"}}`, encodeURIComponent(String(serviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} serviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesManagerGetServiceDetail: async (serviceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceId' is not null or undefined
            assertParamExists('servicesManagerGetServiceDetail', 'serviceId', serviceId)
            const localVarPath = `/api/manager/services/{serviceId}`
                .replace(`{${"serviceId"}}`, encodeURIComponent(String(serviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [searchQuery] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesManagerGetServices: async (searchQuery?: string, pageNumber?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/manager/services`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (searchQuery !== undefined) {
                localVarQueryParameter['SearchQuery'] = searchQuery;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['PageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateServiceCommand} [updateServiceCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesManagerUpdateService: async (updateServiceCommand?: UpdateServiceCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/manager/services`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateServiceCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ServicesManagerApi - functional programming interface
 * @export
 */
export const ServicesManagerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ServicesManagerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateServiceCommand} [createServiceCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesManagerCreateService(createServiceCommand?: CreateServiceCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatusDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesManagerCreateService(createServiceCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} serviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesManagerDeleteService(serviceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatusDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesManagerDeleteService(serviceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} serviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesManagerGetServiceDetail(serviceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ManagerServiceDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesManagerGetServiceDetail(serviceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [searchQuery] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesManagerGetServices(searchQuery?: string, pageNumber?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ManagerServicesDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesManagerGetServices(searchQuery, pageNumber, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpdateServiceCommand} [updateServiceCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesManagerUpdateService(updateServiceCommand?: UpdateServiceCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatusDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesManagerUpdateService(updateServiceCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ServicesManagerApi - factory interface
 * @export
 */
export const ServicesManagerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ServicesManagerApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateServiceCommand} [createServiceCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesManagerCreateService(createServiceCommand?: CreateServiceCommand, options?: any): AxiosPromise<StatusDto> {
            return localVarFp.servicesManagerCreateService(createServiceCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} serviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesManagerDeleteService(serviceId: string, options?: any): AxiosPromise<StatusDto> {
            return localVarFp.servicesManagerDeleteService(serviceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} serviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesManagerGetServiceDetail(serviceId: string, options?: any): AxiosPromise<ManagerServiceDto> {
            return localVarFp.servicesManagerGetServiceDetail(serviceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [searchQuery] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesManagerGetServices(searchQuery?: string, pageNumber?: number, pageSize?: number, options?: any): AxiosPromise<ManagerServicesDto> {
            return localVarFp.servicesManagerGetServices(searchQuery, pageNumber, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateServiceCommand} [updateServiceCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesManagerUpdateService(updateServiceCommand?: UpdateServiceCommand, options?: any): AxiosPromise<StatusDto> {
            return localVarFp.servicesManagerUpdateService(updateServiceCommand, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ServicesManagerApi - object-oriented interface
 * @export
 * @class ServicesManagerApi
 * @extends {BaseAPI}
 */
export class ServicesManagerApi extends BaseAPI {
    /**
     * 
     * @param {CreateServiceCommand} [createServiceCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesManagerApi
     */
    public servicesManagerCreateService(createServiceCommand?: CreateServiceCommand, options?: AxiosRequestConfig) {
        return ServicesManagerApiFp(this.configuration).servicesManagerCreateService(createServiceCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} serviceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesManagerApi
     */
    public servicesManagerDeleteService(serviceId: string, options?: AxiosRequestConfig) {
        return ServicesManagerApiFp(this.configuration).servicesManagerDeleteService(serviceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} serviceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesManagerApi
     */
    public servicesManagerGetServiceDetail(serviceId: string, options?: AxiosRequestConfig) {
        return ServicesManagerApiFp(this.configuration).servicesManagerGetServiceDetail(serviceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [searchQuery] 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesManagerApi
     */
    public servicesManagerGetServices(searchQuery?: string, pageNumber?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return ServicesManagerApiFp(this.configuration).servicesManagerGetServices(searchQuery, pageNumber, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateServiceCommand} [updateServiceCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesManagerApi
     */
    public servicesManagerUpdateService(updateServiceCommand?: UpdateServiceCommand, options?: AxiosRequestConfig) {
        return ServicesManagerApiFp(this.configuration).servicesManagerUpdateService(updateServiceCommand, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userGetProfile: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateSettingsCommand} [updateSettingsCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userUpdateSettings: async (updateSettingsCommand?: UpdateSettingsCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user/update-settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateSettingsCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userGetProfile(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userGetProfile(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpdateSettingsCommand} [updateSettingsCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userUpdateSettings(updateSettingsCommand?: UpdateSettingsCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatusDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userUpdateSettings(updateSettingsCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userGetProfile(options?: any): AxiosPromise<ProfileDto> {
            return localVarFp.userGetProfile(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateSettingsCommand} [updateSettingsCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userUpdateSettings(updateSettingsCommand?: UpdateSettingsCommand, options?: any): AxiosPromise<StatusDto> {
            return localVarFp.userUpdateSettings(updateSettingsCommand, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userGetProfile(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).userGetProfile(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateSettingsCommand} [updateSettingsCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userUpdateSettings(updateSettingsCommand?: UpdateSettingsCommand, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).userUpdateSettings(updateSettingsCommand, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGetUsers: async (pageNumber?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (pageNumber !== undefined) {
                localVarQueryParameter['PageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersGetUsers(pageNumber?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedListOfUserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersGetUsers(pageNumber, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGetUsers(pageNumber?: number, pageSize?: number, options?: any): AxiosPromise<PaginatedListOfUserDto> {
            return localVarFp.usersGetUsers(pageNumber, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersGetUsers(pageNumber?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersGetUsers(pageNumber, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}


